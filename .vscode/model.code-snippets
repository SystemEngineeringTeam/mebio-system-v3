{
	"Model Class": {
    "prefix": "@model",
    "body": [
      "import type { ModelGenerator, ModelMetadata } from '@/types/model';",
      "import type { Override } from '@/types/utils';",
      "import type {",
      "  Prisma,",
      "  ${1:ModelName} as SchemaRaw,",
      "} from '@prisma/client';",
      "import { Model } from '@/utils/model';",
      "",
      "/// Metadata ///",
      "",
      "const metadata = {",
      "  displayName: '${0}',",
      "  modelName: '${2:modelName}',",
      "  primaryKeyName: '${3:primaryKey}',",
      "} as const satisfies ModelMetadata<'${2:modelName}'>;",
      "",
      "/// Custom Types ///",
      "",
      "    /* TODO */",
      "",
      "/// Model Types ///",
      "",
      "type Schema = Override<",
      "  SchemaRaw,",
      "  {",
      "    /* TODO */",
      "  }",
      ">;",
      "",
      "type IncludeKey = keyof Prisma.${1:ModelName}Include;",
      "const includeKeys = [] as const satisfies IncludeKey[];",
      "",
      "type SchemaResolved = Schema & {",
      "    /* TODO */",
      "};",
      "",
      "/// Model ///",
      "",
      "export const __${1:ModelName} = (",
      "  (client) =>",
      "    class ${1:ModelName} extends Model<typeof metadata, SchemaRaw, Schema> {",
      "      public static __prisma = client;",
      "      public static factories = this.getFactories<${1:ModelName}>(client)(${1:ModelName}, metadata)",
      "",
      "      public override data: Schema;",
      "      public constructor(__raw: SchemaRaw) {",
      "        super(metadata, __raw);",
      "",
      "        this.data = {",
      "          ...__raw,",
      "          /* TODO */",
      "        };",
      "      }",
      "",
      "    }",
      "",
      "  ) satisfies ModelGenerator<typeof metadata, SchemaRaw, Schema>;",
      ""
    ],
  }
}
