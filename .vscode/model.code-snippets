{
    "Model Class": {
    "prefix": "@model",
    "body": [
      "import type { DatabaseResult } from '@/types/database';",
      "import type { ModelEntityOf, ModelGenerator, ModelMetadata, ModelMode, ModelSchemaRawOf, ModeWithResolved } from '@/types/model';",
      "import type { Override } from '@/types/utils';",
      "import type {",
      "  Prisma,",
      "  PrismaClient,",
      "  ${1:ModelName} as SchemaRaw,",
      "} from '@prisma/client';",
      "import { Database } from '@/services/database.server';",
      "import { includeKeys2select, matchWithResolved } from '@/utils/model';",
      "",
      "/// Metadata ///",
      "",
      "const metadata = {",
      "  displayName: '${0}',",
      "  modelName: '${2:modelName}',",
      "  primaryKeyName: '${3:primaryKey}',",
      "} as const satisfies ModelMetadata<'${2:modelName}'>;",
      "",
      "/// Custom Types ///",
      "",
      "/* TODO */",
      "",
      "/// Model Types ///",
      "",
      "type Schema = Override<",
      "  SchemaRaw,",
      "  {",
      "     /* TODO */",
      "  }",
      ">;",
      "",
      "type IncludeKey = keyof Prisma.${1:ModelName}Include;",
      "const includeKeys = [] as const satisfies IncludeKey[];",
      "",
      "interface SchemaResolvedRaw {",
      "     /* TODO */",
      "}",
      "",
      "interface SchemaResolved {",
      "  _parent: {",
      "     /* TODO */",
      "  };",
      "}",
      "",
      "/// Model ///",
      "",
      "export const __${1:ModelName} = (<M extends ModelMode = 'DEFAULT'>(client: PrismaClient) => class ${1:ModelName}<Mode extends ModelMode = M> {",
      "  public static __prisma = client;",
      "  private dbError = Database.dbErrorWith(metadata);",
      "  private models = new Database(client).models",
      "",
      "  public __raw: SchemaRaw;",
      "  public data: Schema;",
      "  public __rawResolved: ModeWithResolved<Mode, SchemaResolvedRaw>;",
      "  public dataResolved: ModeWithResolved<Mode, SchemaResolved>;",
      "",
      "  public constructor(__raw: SchemaRaw, __rawResolved?: SchemaResolvedRaw) {",
      "    this.__raw = __raw;",
      "    this.data = {",
      "      ...__raw,",
      "     /* TODO */",
      "    };",
      "",
      "    const { rawResolved, dataResolved } = matchWithResolved<Mode, SchemaResolvedRaw, SchemaResolved>(",
      "      __rawResolved,",
      "      (r) => ({",
      "        _parent: {",
      "        /* TODO */",
      "        },",
      "      }),",
      "    );",
      "",
      "    this.__rawResolved = rawResolved;",
      "    this.dataResolved = dataResolved;",
      "  }",
      "",
      "  public static from(id /* TODO */): DatabaseResult<${1:ModelName}> {",
      "    return Database.transformResult(",
      "      client.${2:modelName}.findUniqueOrThrow({",
      "        where: { ${3:primaryKey}: id },",
      "      }),",
      "    )",
      "      .mapErr(Database.dbErrorWith(metadata).transform('from'))",
      "      .map((data) => new ${1:ModelName}(data));",
      "  }",
      "",
      "public static fromWithResolved(id /* TODO */): DatabaseResult<Member<'WITH_RESOLVED'>> {",
      "    return Database.transformResult(",
      "    client.member.findUniqueOrThrow({",
      "      where: { id },",
      "      include: includeKeys2select(includeKeys),",
      "    }),",
      "  )",
      "    .mapErr(Database.dbErrorWith(metadata).transform('fromWithResolved'))",
      "    .map(/* TODO */)",
      "}",
      "",
      "  public resolveRelation(): DatabaseResult<SchemaResolved> {",
      "    return matchWithDefault(",
      "      this.__rawResolved,",
      "      () => Database.transformResult(",
      "        client.${2:modelName}.findUniqueOrThrow({",
      "          where: { ${3:primaryKey}: this.data.id },",
      "          include: includeKeys2select(includeKeys),",
      "        }),",
      "      )",
      "        .mapErr(this.dbError.transform(this.dbError.transform('resolveRelation'))",
      "        .map(/* TODO */)",
      "    ));",
      "  }",
      "",
      "  public update(_operator: ModelEntityOf<$$Member>, _data: Partial<Schema>): DatabaseResult<${1:ModelName}> {",
      "    throw new Error('Method not implemented.');",
      "  }",
      "",
      "  public delete(_operator: ModelEntityOf<$$Member>): DatabaseResult<void> {",
      "    throw new Error('Method not implemented.');",
      "  }",
      "}) satisfies ModelGenerator<any, typeof metadata, SchemaRaw, Schema, SchemaResolvedRaw, SchemaResolved>;",
      "",
      "export type $${1:ModelName}<M extends ModelMode = 'DEFAULT'> = ModelGenerator<M, typeof metadata, SchemaRaw, Schema, SchemaResolvedRaw, SchemaResolved>; & typeof __${1:ModelName}<M>",
      ""
    ],
    "description": ""
  }
}
